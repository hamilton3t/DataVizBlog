[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/test/index.html",
    "href": "posts/test/index.html",
    "title": "Test Post",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nggplot(data = penguins, aes(x = bill_length_mm)) +\n  geom_histogram(color = \"black\", fill = \"white\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`)."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "posts/01-blogpost/index.html",
    "href": "posts/01-blogpost/index.html",
    "title": "Global Alcohol Consumption",
    "section": "",
    "text": "Introduction:\nI am curious how alcohol consumption varies globally and which types of alcohol are more prevalent in certain countries. I chose a data set from 2018 on global alcohol consumption with 193 observations of 5 variables. In addition to a ‘country’ variable, there are variables corresponding to annual servings (per capita) of beer, wine, spirits, and pure alcohol. First, I will look into the total alcohol consumption for each country, and visualize this on a world map. Next, I’ll investigate the top-consuming countries of the different types of alcohol. The data set can be found here: https://github.com/rfordatascience/tidytuesday/blob/master/data/2018/2018-06-26/week13_alcohol_global.csv.\n\n\nPart 1:\n\nworld_df &lt;- ggplot2::map_data(\"world\")\n\n\nglobal_alc &lt;- global_alc |&gt; mutate(country = fct_recode(country, \n                                                        \"Russia\" = \"Russian Federation\",\n                                                        \"UK\" = \"United Kingdom\",\n                                                        \"Democratic Republic of the Congo\" = \"DR Congo\",\n                                                        \"Ivory Coast\" = \"Cote d'Ivoire\"))\nworld_alc &lt;- left_join(world_df, global_alc, by = c(\"region\" = \"country\"))\n\n\nworld_alc &lt;- world_alc |&gt; \n  mutate(total_consumption = beer_servings + wine_servings + spirit_servings)\n\n\nggplot(data = world_alc, aes(x = long, y = lat, group = group)) +\n  geom_polygon(aes(fill = total_consumption), color = \"black\", linewidth = 0.1) +\n  coord_map(projection = \"mercator\", xlim = c(-180, 180)) +\n  scale_fill_viridis_c(name = \"Alcohol (servings)\") +\n  labs(title = \"Global Alcohol Consumption by Country\",\n       x = \"Longitude\",\n       y = \"Latitude\") +\n  theme_minimal()\n\n\n\n\nThis visualization shows global alcohol consumption by country. The variable ‘total_consumption’ accounts for the sum of each country’s beer, wine, and spirit consumption. With a sequential color scale, we are easily able to see the different levels of alcohol consumption. According to the visualization, Russia and several European countries consume the most alcohol, while the Middle East and Africa consume the least amount.\n\n\nPart 2:\n\n\nThe Top 5 Consuming Countries of Wine, Beer, Spirits, and Pure Alcohol:\n\nwine_df &lt;- global_alc |&gt;\n  group_by(country) |&gt;\n  arrange(desc(wine_servings)) |&gt;\n  select(country, wine_servings) |&gt;\n  head(5)\n\n\nbeer_df &lt;- global_alc |&gt;\n  group_by(country) |&gt;\n  arrange(desc(beer_servings)) |&gt;\n  select(country, beer_servings) |&gt;\n  head(5)\n\n\nspirit_df &lt;- global_alc |&gt;\n  group_by(country) |&gt;\n  arrange(desc(spirit_servings)) |&gt;\n  select(country, spirit_servings) |&gt;\n  head(5)\n\n\npurealc_df &lt;- global_alc |&gt;\n  group_by(country) |&gt;\n  arrange(desc(total_litres_of_pure_alcohol)) |&gt;\n  select(country, total_litres_of_pure_alcohol) |&gt;\n  head(5)\n\n\nkable(wine_df,\n      caption = \"Top 5 Countries: Wine Consumption\",\n      col.names = c(\"Country\", \"Wine Servings\"))\n\n\nTop 5 Countries: Wine Consumption\n\n\nCountry\nWine Servings\n\n\n\n\nFrance\n370\n\n\nPortugal\n339\n\n\nAndorra\n312\n\n\nSwitzerland\n280\n\n\nDenmark\n278\n\n\n\n\n\nThe above table shows the top 5 wine-consuming countries based on annual servings. France is the top consumer with 370 servings per year (per capita). All of these countries are located in Western Europe, which is not surprising given this region’s reputation for high quality wine.\n\nkable(beer_df,\n      caption = \"Top 5 Countries: Beer Consumption\",\n      col.names = c(\"Country\", \"Beer Servings\"))\n\n\nTop 5 Countries: Beer Consumption\n\n\nCountry\nBeer Servings\n\n\n\n\nNamibia\n376\n\n\nCzech Republic\n361\n\n\nGabon\n347\n\n\nGermany\n346\n\n\nLithuania\n343\n\n\n\n\n\nThe above table shows the top 5 beer-consuming countries based on annual servings. Namibia is the top consumer with 376 servings per year (per capita). There are also several European countries in the top 5, including Germany.\n\nkable(spirit_df,\n      caption = \"Top 5 Countries: Spirit Consumption\",\n      col.names = c(\"Country\", \"Spirit Servings\"))\n\n\nTop 5 Countries: Spirit Consumption\n\n\nCountry\nSpirit Servings\n\n\n\n\nGrenada\n438\n\n\nBelarus\n373\n\n\nHaiti\n326\n\n\nRussia\n326\n\n\nSt. Lucia\n315\n\n\n\n\n\nThe above table shows the top 5 spirit-consuming countries based on annual servings. Grenada is the top consumer with 438 servings per year (per capita), 65 servings more than Belarus in second place. Three of these countries are Caribbean, and the other two are Belarus and Russia. Vodka is culturally significant and very popular in both Russia and Belarus, so it is fitting to see them in the top 5 of spirit consumption.\n\nkable(purealc_df,\n      caption = \"Top 5 Countries: Pure Alcohol Consumption\",\n      col.names = c(\"Country\", \"Pure Alcohol (litres)\"))\n\n\nTop 5 Countries: Pure Alcohol Consumption\n\n\nCountry\nPure Alcohol (litres)\n\n\n\n\nBelarus\n14.4\n\n\nLithuania\n12.9\n\n\nAndorra\n12.4\n\n\nGrenada\n11.9\n\n\nCzech Republic\n11.8\n\n\n\n\n\nThe above table shows the top 5 pure alcohol-consuming countries based on total litres. Belarus is the top consumer with 14.4 litres per year (per capita). In 2010, Belarus consumed 17.5 litres of pure alcohol per capita. Although their consumption has decreased, they still remain the top consumer in this particular year.\n\n\nConclusion:\nI was eager to analyze this data and I’m content with what I found. Given that this data covers only 1 year, you can’t look at certain trends; for example, wine consumption in France over a 10 year span. Also, there are some missing values or zero values which can provide some inaccuracy. I would like to look at data similar to this with a larger time horizon, which would allow for more in-depth analysis.\n\n\nConnection to class:\nThe world map visualization is effective because I’m working with a “global” data set. It’s interesting to look at quantitative variables on a world map, especially with a sequential color scale (when it’s appropriate). As soon as I found this data set, I thought of the map example we did in class with “well-being” mapped globally. However, for looking at the top 5 consuming countries of the different types of alcohol, I believe a simple table is more appropriate. In this case, even a table works more effectively than a bar chart or similar visualization."
  },
  {
    "objectID": "posts/02-blogpost/ski_resort.html",
    "href": "posts/02-blogpost/ski_resort.html",
    "title": "US Ski Resort Analysis",
    "section": "",
    "text": "us_ski &lt;- us_ski |&gt; separate(resort_name,\n                             sep = \",\",\n                             into = c(\"resort\", \"state_abbr\"))\n\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [233].\n\nnum_state &lt;- us_ski |&gt; group_by(state) |&gt;\n  summarise(num_resort = n()) \n\nstate_df &lt;- ggplot2::map_data(\"state\")\nstate_df$region &lt;- toTitleCase(state_df$region)\n\nresort_map &lt;- left_join(state_df, num_state, by = c(\"region\" = \"state\"))\n\n\nggplot(data = resort_map, mapping = aes(x = long, y = lat, group = group)) +\n  geom_polygon(aes(fill = num_resort), color = \"black\") +\n  coord_map(projection = \"albers\", lat0 = 39, lat1 = 45) +\n  scale_fill_viridis_c(name = \"Number of Resorts\") +\n  labs(title = \"Ski Resorts per State\") +\n  theme_void() \n\n\n\n\n\n\n\n\ndifficulty_df &lt;- us_ski |&gt;\n  arrange(desc(black_percent)) |&gt;\n  slice(1:10) \n\ndifficulty_df &lt;- difficulty_df |&gt;\n  pivot_longer(cols = c(green_percent, blue_percent, black_percent),\n               names_to = \"difficulty\",\n               values_to = \"percent\") |&gt;\n  mutate(percent = ifelse(is.na(percent), 0, percent))\n\nggplot(data = difficulty_df, aes(x = resort, y = percent, fill = difficulty)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_fill_manual(values = c(\"green_percent\" = \"green4\",\n                    \"blue_percent\" = \"blue2\",\n                    \"black_percent\" = \"black\"), name = \"Difficulty Level\") +\n  theme_minimal() +\n  labs(title = \"Top 10 Most Difficult Ski Resorts\",\n       y = \"Percent Black Diamond\",\n       x = \"Ski Resort Name\")\n\n\n\n\n\n\n\n\nvert_mod &lt;- lm(vertical ~ summit + runs + acres, data = us_ski)\nvert_mod |&gt; tidy()\n\n# A tibble: 4 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  246.     48.1          5.12 5.29e- 7\n2 summit         0.104   0.00931     11.2  8.72e-25\n3 runs           9.28    1.05         8.81 7.15e-17\n4 acres          0.167   0.0478       3.50 5.25e- 4\n\n## Yhat = 246 + 0.104(summit) + 9.28(runs) + 0.167(acres)\n\nCheck assumptions:\n\naugment_ski &lt;- augment(vert_mod)\n\n## linearity\n## check a scatterplot of vertical vs. each predictor\nggplot(data = augment_ski, aes(x = summit, y = vertical)) +\n  geom_jitter(width = 0.2, alpha = 0.2)\n\n\n\nggplot(data = augment_ski, aes(x = runs, y = vertical)) +\n  geom_jitter(width = 0.2, alpha = 0.2)\n\n\n\nggplot(data = augment_ski, aes(x = acres, y = vertical)) +\n  geom_jitter(width = 0.2, alpha = 0.2)\n\n\n\n## normality\n## histogram of the residuals\nggplot(data = augment_ski, aes(x = .resid)) +\n  geom_histogram(color = \"blue4\",\n                 fill = \"lightblue\",\n                 bins = 20)\n\n\n\n## constant variance\n## check a residual plot of residuals vs. fitted values\nggplot(data = augment_ski, aes(x = .fitted, y = .resid)) +\n  geom_jitter(width = 0.2, alpha = 0.2)\n\n\n\n## independence\n## Think about how the data was collected\n\nHere is the equation of our linear regression model: Yhat = 246 + 0.104(summit) + 9.28(runs) + 0.167(acres). In this case, the response variable is vertical. I am looking to estimate the vertical drop of a ski resort based on its summit elevation, number of runs, and total acres. The intercept is 246, meaning the predicted vertical drop of a ski resort is expected to be 246 feet when all of the predictors are equal to zero. Let’s interpret the coefficients B1, B2, and B3. The first coefficient, 0.104, means for each additional foot of elevation, the model predicts an increase of 0.104 feet in vertical drop (holding all other variables constant). B2 is 9.28, which means for each additional run at the ski resort, the model predicts an increase of 9.28 feet in vertical drop (holding all other variables constant). B3 is 0.167, which means for each additional acre of terrain at the ski resort, the model predicts an increase of 0.167 feet in vertical drop (holding all other variables constant).\n\nsummary(vert_mod) \n\n\nCall:\nlm(formula = vertical ~ summit + runs + acres, data = us_ski)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2500.54  -275.20   -86.91   258.18  1937.81 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 246.33544   48.13897   5.117 5.29e-07 ***\nsummit        0.10404    0.00931  11.175  &lt; 2e-16 ***\nruns          9.27660    1.05237   8.815  &lt; 2e-16 ***\nacres         0.16748    0.04782   3.502 0.000525 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 484 on 328 degrees of freedom\n  (32 observations deleted due to missingness)\nMultiple R-squared:  0.7432,    Adjusted R-squared:  0.7408 \nF-statistic: 316.4 on 3 and 328 DF,  p-value: &lt; 2.2e-16\n\n\nThe residual standard error is 484, meaing that the actual vertical drop deviates from the predicted values by approximately 484 feet. The multiple r-squared value measures the proportion of variance in the response variable, vertical drop, that is explained by the predictor variables (summit elevation, number of runs, total acres). In this case, 0.7432 means that 74.32% of the variance in vertical drop is explained by the predictors in the model. The adjusted r-squared value (0.7408) is very close to the other r-squared value and provides a more conservative estimate given the inclusion of additional predictor variables. The F-statistic is 316.4 on 3 and 328 degrees of freedom, meaning there is a strongly significant relationship between the predictor variables and the response variable, vertical drop. Additionally, the p-value associated with the F-stat is very small and suggests that at least one of the predictors is useful in predicting the response variable, and that the model as a whole is significant\nNext: Let’s choose one predictor, summit elevation. We can look at the actual observed data points from our data set and we can fit a linear model to see what it predicts for vertical drop given summit elevation.\n\nsum_mod &lt;- lm(vertical ~ summit, data = us_ski)\nsum_mod\n\n\nCall:\nlm(formula = vertical ~ summit, data = us_ski)\n\nCoefficients:\n(Intercept)       summit  \n   368.6436       0.1892  \n\n## For each additional foot of summit elevation, the model predicts an increase of 0.19 feet in vertical drop \n\ngrid &lt;- us_ski |&gt;\n  data_grid(\n    summit = seq_range(summit, n = 10))\n\naug_ski1 &lt;- augment(sum_mod, newdata = grid, interval = \"confidence\")\n\nggplot(data = us_ski, aes(x = summit, y = vertical)) +\n  geom_point(size = 1.2) +\n  geom_line(data = aug_ski1, aes(y = .fitted), \n            colour = \"yellow4\", linewidth = 1.0) +\n  geom_ribbon(data = aug_ski1, aes(y = .fitted,\n                                  ymin = .lower,\n                                  ymax = .upper), alpha = 0.4) +\n  theme_minimal() +\n  labs(title = \"Relationship between Summit Elevation and Vertical Drop of Ski Resorts\",\n       x = \"Summit Elevation (ft)\",\n       y = \"Vertical Drop (ft)\")\n\nWarning: Removed 30 rows containing missing values (`geom_point()`).\n\n\n\n\n\nThis shows the relationship between the summit elevation of ski resorts and their vertical drop. The data points represent each ski resort from the data set and their observed summit elevation and vertical drop. The line shows the predictions from our linear model. It represents fitted values of the response variable, vertical, based on the summit elevation predictor. The shaded area around the line shows the confidence interval for the predicted values of vertical drop and allows us to see the uncertainty associated with the predictions. To sum up, as summit elevation increases, the model predicts that vertical drop tends to increase as well. This is"
  },
  {
    "objectID": "posts/01-blogpost/global_alcohol.html",
    "href": "posts/01-blogpost/global_alcohol.html",
    "title": "Global Alcohol Consumption",
    "section": "",
    "text": "Introduction:\nI am curious how alcohol consumption varies globally and which types of alcohol are more prevalent in certain countries. I chose a data set from 2018 on global alcohol consumption with 193 observations of 5 variables. In addition to a ‘country’ variable, there are variables corresponding to annual servings (per capita) of beer, wine, spirits, and pure alcohol. First, I will look into the total alcohol consumption for each country, and visualize this on a world map. Next, I’ll investigate the top-consuming countries of the different types of alcohol. The data set can be found here: https://github.com/rfordatascience/tidytuesday/blob/master/data/2018/2018-06-26/week13_alcohol_global.csv.\n\n\nPart 1:\n\nworld_df &lt;- ggplot2::map_data(\"world\")\n\n\nglobal_alc &lt;- global_alc |&gt; mutate(country = fct_recode(country, \n                                                        \"Russia\" = \"Russian Federation\",\n                                                        \"UK\" = \"United Kingdom\",\n                                                        \"Democratic Republic of the Congo\" = \"DR Congo\",\n                                                        \"Ivory Coast\" = \"Cote d'Ivoire\"))\nworld_alc &lt;- left_join(world_df, global_alc, by = c(\"region\" = \"country\"))\n\n\nworld_alc &lt;- world_alc |&gt; \n  mutate(total_consumption = beer_servings + wine_servings + spirit_servings)\n\n\nggplot(data = world_alc, aes(x = long, y = lat, group = group)) +\n  geom_polygon(aes(fill = total_consumption), color = \"black\", linewidth = 0.1) +\n  coord_map(projection = \"mercator\", xlim = c(-180, 180)) +\n  scale_fill_viridis_c(name = \"Alcohol (servings)\") +\n  labs(title = \"Global Alcohol Consumption by Country\",\n       x = \"Longitude\",\n       y = \"Latitude\") +\n  theme_minimal()\n\n\n\n\nThis visualization shows global alcohol consumption by country. The variable ‘total_consumption’ accounts for the sum of each country’s beer, wine, and spirit consumption. With a sequential color scale, we are easily able to see the different levels of alcohol consumption. According to the visualization, Russia and several European countries consume the most alcohol, while the Middle East and Africa consume the least amount.\n\n\nPart 2:\n\n\nThe Top 5 Consuming Countries of Wine, Beer, Spirits, and Pure Alcohol:\n\nwine_df &lt;- global_alc |&gt;\n  group_by(country) |&gt;\n  arrange(desc(wine_servings)) |&gt;\n  select(country, wine_servings) |&gt;\n  head(5)\n\n\nbeer_df &lt;- global_alc |&gt;\n  group_by(country) |&gt;\n  arrange(desc(beer_servings)) |&gt;\n  select(country, beer_servings) |&gt;\n  head(5)\n\n\nspirit_df &lt;- global_alc |&gt;\n  group_by(country) |&gt;\n  arrange(desc(spirit_servings)) |&gt;\n  select(country, spirit_servings) |&gt;\n  head(5)\n\n\npurealc_df &lt;- global_alc |&gt;\n  group_by(country) |&gt;\n  arrange(desc(total_litres_of_pure_alcohol)) |&gt;\n  select(country, total_litres_of_pure_alcohol) |&gt;\n  head(5)\n\n\nkable(wine_df,\n      caption = \"Top 5 Countries: Wine Consumption\",\n      col.names = c(\"Country\", \"Wine Servings\"))\n\n\nTop 5 Countries: Wine Consumption\n\n\nCountry\nWine Servings\n\n\n\n\nFrance\n370\n\n\nPortugal\n339\n\n\nAndorra\n312\n\n\nSwitzerland\n280\n\n\nDenmark\n278\n\n\n\n\n\nThe above table shows the top 5 wine-consuming countries based on annual servings. France is the top consumer with 370 servings per year (per capita). All of these countries are located in Western Europe, which is not surprising given this region’s reputation for high quality wine.\n\nkable(beer_df,\n      caption = \"Top 5 Countries: Beer Consumption\",\n      col.names = c(\"Country\", \"Beer Servings\"))\n\n\nTop 5 Countries: Beer Consumption\n\n\nCountry\nBeer Servings\n\n\n\n\nNamibia\n376\n\n\nCzech Republic\n361\n\n\nGabon\n347\n\n\nGermany\n346\n\n\nLithuania\n343\n\n\n\n\n\nThe above table shows the top 5 beer-consuming countries based on annual servings. Namibia is the top consumer with 376 servings per year (per capita). There are also several European countries in the top 5, including Germany.\n\nkable(spirit_df,\n      caption = \"Top 5 Countries: Spirit Consumption\",\n      col.names = c(\"Country\", \"Spirit Servings\"))\n\n\nTop 5 Countries: Spirit Consumption\n\n\nCountry\nSpirit Servings\n\n\n\n\nGrenada\n438\n\n\nBelarus\n373\n\n\nHaiti\n326\n\n\nRussia\n326\n\n\nSt. Lucia\n315\n\n\n\n\n\nThe above table shows the top 5 spirit-consuming countries based on annual servings. Grenada is the top consumer with 438 servings per year (per capita), 65 servings more than Belarus in second place. Three of these countries are Caribbean, and the other two are Belarus and Russia. Vodka is culturally significant and very popular in both Russia and Belarus, so it is fitting to see them in the top 5 of spirit consumption.\n\nkable(purealc_df,\n      caption = \"Top 5 Countries: Pure Alcohol Consumption\",\n      col.names = c(\"Country\", \"Pure Alcohol (litres)\"))\n\n\nTop 5 Countries: Pure Alcohol Consumption\n\n\nCountry\nPure Alcohol (litres)\n\n\n\n\nBelarus\n14.4\n\n\nLithuania\n12.9\n\n\nAndorra\n12.4\n\n\nGrenada\n11.9\n\n\nCzech Republic\n11.8\n\n\n\n\n\nThe above table shows the top 5 pure alcohol-consuming countries based on total litres. Belarus is the top consumer with 14.4 litres per year (per capita). In 2010, Belarus consumed 17.5 litres of pure alcohol per capita. Although their consumption has decreased, they still remain the top consumer in this particular year.\n\n\nConclusion:\nI was eager to analyze this data and I’m content with what I found. Given that this data covers only 1 year, you can’t look at certain trends; for example, wine consumption in France over a 10 year span. Also, there are some missing values or zero values which can provide some inaccuracy. I would like to look at data similar to this with a larger time horizon, which would allow for more in-depth analysis.\n\n\nConnection to class:\nThe world map visualization is effective because I’m working with a “global” data set. It’s interesting to look at quantitative variables on a world map, especially with a sequential color scale (when it’s appropriate). As soon as I found this data set, I thought of the map example we did in class with “well-being” mapped globally. However, for looking at the top 5 consuming countries of the different types of alcohol, I believe a simple table is more appropriate. In this case, even a table works more effectively than a bar chart or similar visualization."
  },
  {
    "objectID": "posts/02-blogpost/ski_resort.html#httpsgist.github.comewisemanb251e5eaf70ca52a4b9b10dce9e635a4",
    "href": "posts/02-blogpost/ski_resort.html#httpsgist.github.comewisemanb251e5eaf70ca52a4b9b10dce9e635a4",
    "title": "US Ski Resort Analysis",
    "section": "",
    "text": "us_ski &lt;- us_ski |&gt; separate(resort_name,\n                             sep = \",\",\n                             into = c(\"resort\", \"state_abbr\"))\n\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [233].\n\nnum_state &lt;- us_ski |&gt; group_by(state) |&gt;\n  summarise(num_resort = n()) \n\nstate_df &lt;- ggplot2::map_data(\"state\")\nstate_df$region &lt;- toTitleCase(state_df$region)\n\nresort_map &lt;- left_join(state_df, num_state, by = c(\"region\" = \"state\"))\n\n\nggplot(data = resort_map, mapping = aes(x = long, y = lat, group = group)) +\n  geom_polygon(aes(fill = num_resort), color = \"black\") +\n  coord_map(projection = \"albers\", lat0 = 39, lat1 = 45) +\n  scale_fill_viridis_c(name = \"Number of Resorts\") +\n  labs(title = \"Ski Resorts per State\") +\n  theme_void() \n\n\n\n\n\n\n\n\ndifficulty_df &lt;- us_ski |&gt;\n  arrange(desc(black_percent)) |&gt;\n  slice(1:10) \n\ndifficulty_df &lt;- difficulty_df |&gt;\n  pivot_longer(cols = c(green_percent, blue_percent, black_percent),\n               names_to = \"difficulty\",\n               values_to = \"percent\") |&gt;\n  mutate(percent = ifelse(is.na(percent), 0, percent))\n\nggplot(data = difficulty_df, aes(x = resort, y = percent, fill = difficulty)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_fill_manual(values = c(\"green_percent\" = \"green4\",\n                    \"blue_percent\" = \"blue2\",\n                    \"black_percent\" = \"black\"), name = \"Difficulty Level\") +\n  theme_minimal() +\n  labs(title = \"Top 10 Most Difficult Ski Resorts\",\n       y = \"Percent Black Diamond\",\n       x = \"Ski Resort Name\")\n\n\n\n\n\n\n\n\nvert_mod &lt;- lm(vertical ~ summit + runs + acres, data = us_ski)\nvert_mod |&gt; tidy()\n\n# A tibble: 4 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  246.     48.1          5.12 5.29e- 7\n2 summit         0.104   0.00931     11.2  8.72e-25\n3 runs           9.28    1.05         8.81 7.15e-17\n4 acres          0.167   0.0478       3.50 5.25e- 4\n\n## Yhat = 246 + 0.104(summit) + 9.28(runs) + 0.167(acres)\n\nCheck assumptions:\n\naugment_ski &lt;- augment(vert_mod)\n\n## linearity\n## check a scatterplot of vertical vs. each predictor\nggplot(data = augment_ski, aes(x = summit, y = vertical)) +\n  geom_jitter(width = 0.2, alpha = 0.2)\n\n\n\nggplot(data = augment_ski, aes(x = runs, y = vertical)) +\n  geom_jitter(width = 0.2, alpha = 0.2)\n\n\n\nggplot(data = augment_ski, aes(x = acres, y = vertical)) +\n  geom_jitter(width = 0.2, alpha = 0.2)\n\n\n\n## normality\n## histogram of the residuals\nggplot(data = augment_ski, aes(x = .resid)) +\n  geom_histogram(color = \"blue4\",\n                 fill = \"lightblue\",\n                 bins = 20)\n\n\n\n## constant variance\n## check a residual plot of residuals vs. fitted values\nggplot(data = augment_ski, aes(x = .fitted, y = .resid)) +\n  geom_jitter(width = 0.2, alpha = 0.2)\n\n\n\n## independence\n## Think about how the data was collected\n\nHere is the equation of our linear regression model: Yhat = 246 + 0.104(summit) + 9.28(runs) + 0.167(acres). In this case, the response variable is vertical. I am looking to estimate the vertical drop of a ski resort based on its summit elevation, number of runs, and total acres. The intercept is 246, meaning the predicted vertical drop of a ski resort is expected to be 246 feet when all of the predictors are equal to zero. Let’s interpret the coefficients B1, B2, and B3. The first coefficient, 0.104, means for each additional foot of elevation, the model predicts an increase of 0.104 feet in vertical drop (holding all other variables constant). B2 is 9.28, which means for each additional run at the ski resort, the model predicts an increase of 9.28 feet in vertical drop (holding all other variables constant). B3 is 0.167, which means for each additional acre of terrain at the ski resort, the model predicts an increase of 0.167 feet in vertical drop (holding all other variables constant).\n\nsummary(vert_mod) \n\n\nCall:\nlm(formula = vertical ~ summit + runs + acres, data = us_ski)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2500.54  -275.20   -86.91   258.18  1937.81 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 246.33544   48.13897   5.117 5.29e-07 ***\nsummit        0.10404    0.00931  11.175  &lt; 2e-16 ***\nruns          9.27660    1.05237   8.815  &lt; 2e-16 ***\nacres         0.16748    0.04782   3.502 0.000525 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 484 on 328 degrees of freedom\n  (32 observations deleted due to missingness)\nMultiple R-squared:  0.7432,    Adjusted R-squared:  0.7408 \nF-statistic: 316.4 on 3 and 328 DF,  p-value: &lt; 2.2e-16\n\n\nThe residual standard error is 484, meaing that the actual vertical drop deviates from the predicted values by approximately 484 feet. The multiple r-squared value measures the proportion of variance in the response variable, vertical drop, that is explained by the predictor variables (summit elevation, number of runs, total acres). In this case, 0.7432 means that 74.32% of the variance in vertical drop is explained by the predictors in the model. The adjusted r-squared value (0.7408) is very close to the other r-squared value and provides a more conservative estimate given the inclusion of additional predictor variables. The F-statistic is 316.4 on 3 and 328 degrees of freedom, meaning there is a strongly significant relationship between the predictor variables and the response variable, vertical drop. Additionally, the p-value associated with the F-stat is very small and suggests that at least one of the predictors is useful in predicting the response variable, and that the model as a whole is significant\nNext: Let’s choose one predictor, summit elevation. We can look at the actual observed data points from our data set and we can fit a linear model to see what it predicts for vertical drop given summit elevation.\n\nsum_mod &lt;- lm(vertical ~ summit, data = us_ski)\nsum_mod\n\n\nCall:\nlm(formula = vertical ~ summit, data = us_ski)\n\nCoefficients:\n(Intercept)       summit  \n   368.6436       0.1892  \n\n## For each additional foot of summit elevation, the model predicts an increase of 0.19 feet in vertical drop \n\ngrid &lt;- us_ski |&gt;\n  data_grid(\n    summit = seq_range(summit, n = 10))\n\naug_ski1 &lt;- augment(sum_mod, newdata = grid, interval = \"confidence\")\n\nggplot(data = us_ski, aes(x = summit, y = vertical)) +\n  geom_point(size = 1.2) +\n  geom_line(data = aug_ski1, aes(y = .fitted), \n            colour = \"yellow4\", linewidth = 1.0) +\n  geom_ribbon(data = aug_ski1, aes(y = .fitted,\n                                  ymin = .lower,\n                                  ymax = .upper), alpha = 0.4) +\n  theme_minimal() +\n  labs(title = \"Relationship between Summit Elevation and Vertical Drop of Ski Resorts\",\n       x = \"Summit Elevation (ft)\",\n       y = \"Vertical Drop (ft)\")\n\nWarning: Removed 30 rows containing missing values (`geom_point()`).\n\n\n\n\n\nThis shows the relationship between the summit elevation of ski resorts and their vertical drop. The data points represent each ski resort from the data set and their observed summit elevation and vertical drop. The line shows the predictions from our linear model. It represents fitted values of the response variable, vertical, based on the summit elevation predictor. The shaded area around the line shows the confidence interval for the predicted values of vertical drop and allows us to see the uncertainty associated with the predictions. To sum up, as summit elevation increases, the model predicts that vertical drop tends to increase as well. This is"
  }
]